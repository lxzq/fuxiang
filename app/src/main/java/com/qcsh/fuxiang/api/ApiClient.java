package com.qcsh.fuxiang.api;import android.content.Context;import android.os.Handler;import android.text.TextUtils;import android.util.Log;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.http.client.HttpRequest;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.AsyncHttpResponseHandler;import com.loopj.android.http.RequestParams;import com.qcsh.fuxiang.AppConfig;import com.qcsh.fuxiang.common.ACache;import org.apache.http.Header;import org.apache.http.message.BasicHeader;import org.json.JSONObject;import java.io.File;public class ApiClient {    public static AsyncHttpClient httpClient = new AsyncHttpClient();    /**     * 不重复缓存数据     */    public static int NO_CACHE = -2;    static {        httpClient.setTimeout(ApiConfig.TIME_OUT);    }    /**     * 上传文件     * @param method 上传地址     * @param filePath 文件路径     * @param callBack 回调函数     * @param params 上传参数     */    public static void upLoadFile(String method,String filePath ,HttpRequestCallBack<String> callBack, String... params){        String url = AppConfig.BASE_URL  + method;        HttpUtils http = new HttpUtils();        com.lidroid.xutils.http.RequestParams requestParams = new com.lidroid.xutils.http.RequestParams();        requestParams.addBodyParameter("file",new File(filePath));        getRequestParams(requestParams, params);        http.send(HttpRequest.HttpMethod.POST,url,callBack);    }    /**     * 下载文件     * @param method 下载地址     * @param target 存在本地的路径     * @param callBack 下载回调     */    public static void downLoadFile(String method, String target, HttpRequestCallBack<File> callBack){        String url = AppConfig.BASE_URL  + method;        HttpUtils http = new HttpUtils();        http.download(url, target, true, true, callBack);    }    /**     * POST请求     * @param context     * @param method     * @param responseHandler     * @param params     */    public static void post(Context context ,String method ,AsyncHttpResponseHandler responseHandler ,String... params){        RequestParams requestParams = getRequestParams(context, method, params);        String url = AppConfig.BASE_URL  + method;        Log.i(ApiClient.class.getName(), "请求地址："+url + "?"+ requestParams);        httpClient.post(context, url , null, requestParams , null, responseHandler);    }    /**     * GET请求     * @param context     * @param method     * @param responseHandler     * @param params     */    public static void get(Context context ,String method ,AsyncHttpResponseHandler responseHandler ,String... params){        RequestParams requestParams = getRequestParams(context, method, params);        String url = AppConfig.BASE_URL  + method;        Log.i(ApiClient.class.getName(), "请求地址："+url + "?"+ requestParams);        httpClient.get(context, url , null, requestParams , responseHandler);    }    private static RequestParams getRequestParams(final Context context,String method, String... strings){        RequestParams para = new RequestParams();        try{            if(null != strings && strings.length > 1){                for(int i = strings.length - 1 ; i >= 0 ; i-=2){                    int key = i;                    int value = key--;                    String paramName = strings[key];                    String paramValue = strings[value];                    para.put(paramName, paramValue);                }            }        }catch(Exception e){            e.printStackTrace();            Log.e("HttpClientManager",  "  getRequestParams  error  : " + e.getMessage());        }        return para;    }    private static com.lidroid.xutils.http.RequestParams getRequestParams(com.lidroid.xutils.http.RequestParams requestParams      ,String... strings){        try{            if(null != strings && strings.length > 1){                for(int i = strings.length - 1 ; i >= 0 ; i-=2){                    int key = i;                    int value = key--;                    String paramName = strings[key];                    String paramValue = strings[value];                    requestParams.addBodyParameter(paramName,paramValue);                }            }        }catch(Exception e){            e.printStackTrace();            Log.e("HttpClientManager",  "  getRequestParams  error  : " + e.getMessage());        }      return requestParams;    }    private static String params(String... strings) {        JSONObject json = new JSONObject();        if (null != strings && strings.length > 1) {            for (int i = strings.length - 1; i >= 0; i -= 2) {                int key = i;                int value = key--;                String paramName = strings[key];                String paramValue = strings[value];                try {                    json.put(paramName, paramValue);                } catch (Exception e) {                }            }        }        return json.toString();    }}